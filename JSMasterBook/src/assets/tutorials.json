[
    {
        "id": 1,
        "title": "JavaScript",
        "image": "../../../assets/tutImage/javascript.jpg",
        "lession": [

            {   "lessionName" : "What ?",
                "lessionWhat" : "JavaScript is a scripting or programming language that allows you to implement complex features on web pages . ." },
            
            {   "lessionName" : "Why ?",
                "lessionWhat": "JavaScript is extensively used by the web developers to create various web applications and to add interactive features to them & most of the internet browsers support JavaScript . ." },
            
            {   "lessionName" : "How ?",
                "lessionWhat": "The way JavaScript works is interesting. Inside a normal Web page you place some JavaScript code (See How Web Pages Work for details on Web pages). When the browser loads the page, the browser has a built-in interpreter that reads the JavaScript code it finds in the page and runs it . ." },
            
            {   "lessionName" : "Functional Programing",
                "lessionWhat": "Funtional Programing (often abbreviated FB) is the process of building software by composing pure function, avoiding share state, mutable data, and side-effect . ." },

            {   "lessionName" : "Data Types",
                "lessionWhat": "Javascript variables can hold many data types: Primitive Values, Object, Boolean, Number, String, NULL, Undefined, Symbol, . ." },

            {   "lessionName" : "Primitive Values",
                "lessionWhat": "Always Immutable, Properties can't be change. ."},

            {   "lessionName" : "Object",
                "lessionWhat": "The simple way to understanding is all None Primitive values is Object. Mutable by default & User-extensible. ."},

            { "lessionName" : "Null & Undefined" },
            { "lessionName" : "Type Coercion" },
            { "lessionName" : "Truthy & Falsy Values" },
            { "lessionName" : "Operators" },
            { "lessionName" : "Variable & Scope" },
            { "lessionName" : "Hoisting" },
            { "lessionName" : "Program Structure" },
            { "lessionName" : "Function" },
            { "lessionName" : "Asynchronous Programing" }
        ]
    },
    {
        "id": 2,
        "title": "Angular",
        "image": "../../../assets/tutImage/angular.jpg",
        "lession": [
            { "lessionName" : "What ?" },
            { "lessionName" : "Why ?" },
            { "lessionName" : "How ?" },
            { "lessionName" : "TypeScript" },
            { "lessionName" : "Components" },
            { "lessionName" : "Modules" },
            { "lessionName" : "RxJS" },
            { "lessionName" : "NgRX" },
            { "lessionName" : "Best Practices" }
        ]
    },
    {
        "id": 3,
        "title": "Bootstrap",
        "image": "../../../assets/tutImage/bootstrap.jpg",
        "lession": [
            { "lessionName" : "What ?" },
            { "lessionName" : "Why ?" },
            { "lessionName" : "How ?" },
            { "lessionName" : "Grid" },
            { "lessionName" : "Component" },
            { "lessionName" : "Layout" }
        ]
    },
    {
        "id": 4,
        "title": "CSS",
        "image": "../../../assets/tutImage/css.jpg",
        "lession": [
            { "lessionName" : "What ?" },
            { "lessionName" : "Why ?" },
            { "lessionName" : "How ?" },
            { "lessionName" : "Selector" },
            { "lessionName" : "SCSS" },
            { "lessionName" : "BEM" }
        ]
    },
    {
        "id": 5,
        "title": ".NET",
        "image": "../../../assets/tutImage/net.jpg",
        "lession": [
            { "lessionName" : "What ?" },
            { "lessionName" : "Why ?" },
            { "lessionName" : "How ?" },
            { "lessionName" : "ASP.Net Core" },
            { "lessionName" : "Design Patterns" },
            { "lessionName" : "Micro Services" },

            {   "lessionName" : "Fluent API ? | Entity Frame Work Core(EF Core)",
                "lessionWhat" : "Entity Framework Core Fluent API is used to configure domain class to orverride conventions. EF Fluent API is based on a Fluent API design pattern where is the result is formulated by method chaining . ." }

        ]
    },
    {
        "id": 6,
        "title": "Riven",
        "image": "../../../assets/tutImage/riven.jpg",
        "lession": [
            { "lessionName" : "What ?" },
            { "lessionName" : "Why ?" },
            { "lessionName" : "How ?" },
            { "lessionName" : "Fast Combos" },
            { "lessionName" : "Hight Lights" },
            { "lessionName" : "Items Building" }
        ]
    }
]